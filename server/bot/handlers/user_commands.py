import asyncio
import logging 

from aiogram.exceptions import TelegramBadRequest
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.client.default import DefaultBotProperties

from bot.keyboards.inline import *
from bot.keyboards.reply import *
from bot.database.methods import *
from bot.utils.states import *
from bot.handlers.bot_messages import *

logger = logging.getLogger(__name__)

bot = Bot(Settings().BOT_TOKEN.get_secret_value(), default=DefaultBotProperties(parse_mode='HTML'))
commands = Router()

welcome_message_id = None

@commands.message(CommandStart())
async def start_command(msg: Message, state: FSMContext):
    user_tgid = msg.from_user.id
    user_tgfullname = msg.from_user.full_name
    user_tgname = msg.from_user.username or str(user_tgid)
    user_language_code = msg.from_user.language_code

    await state.update_data(
        user_tgid=user_tgid,
        user_fullname=user_tgfullname,
        user_tgname=user_tgname,
        user_language_code=user_language_code
    )

    try:
        await bot.delete_message(msg.chat.id, msg.message_id)
    except Exception as e:
        logger.error(f"Failed to delete message: {e}")

    welcome_message = await msg.answer(
        '–ü—Ä–∏–≤–µ—Ç! –ö–æ–º–∞–Ω–¥–∞ –ú—É–Ω–∫–∏ —Ä–∞–¥–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è :)',
        reply_markup=rmk
    )
    
    await state.set_state(StartMessage.welcome_message_id)
    await state.update_data(welcome_message_id=welcome_message.message_id)
    
    await msg.answer("–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫—Ç–æ —Ç—ã?", reply_markup=await get_choose_rule())

@commands.callback_query(lambda c: c.data in ["user", "employer"])
async def process_user_type(callback_query: CallbackQuery, state: FSMContext):
    user_type = callback_query.data

    try:
        await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
        data = await state.get_data()
        welcome_message_id = data.get('welcome_message_id')
        if welcome_message_id:
            await bot.delete_message(callback_query.message.chat.id, welcome_message_id)
    except Exception as e:
        logger.error(f"Failed to delete message: {e}")

    if user_type == "user":
        await callback_query.message.answer("–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π —Ç–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–¥–∏–º —Ç–µ–±–µ —Ä–µ–∑—é–º–µ üòä", reply_markup=rmk)
        await callback_query.message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –§–ò–û\n–ù–∞–ø—Ä–∏–º–µ—Ä: –¢—É—Ä–æ–≤–µ—Ü –í–∞–ª–µ—Ä–∏–π –ê–Ω–¥—Ä–µ–µ–≤–∏—á", reply_markup=rmk)

        await state.set_state(UserForm.fio)
        
    elif user_type == "employer":
        await callback_query.message.answer("–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –¥–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–ø–∞–Ω–∏–∏ üòä", reply_markup=rmk)
        await callback_query.message.answer("–ö–∞–∫ –∫ –í–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?", reply_markup=rmk)
        
        await state.set_state(EmployerForm.name)

@commands.message(Command("help"))
async def help_command(msg: Message):
    help_text = "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n" \
                "/start - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º\n" \
                "/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n" \
                "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n" \
                "–ò—Å–∫–∞—Ç—å –í–∞–∫–∞–Ω—Å–∏–∏ - –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π\n" \
                "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—é–º–µ - –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ\n" \
                "–û –±–æ—Ç–µ - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"

    await msg.answer(help_text, reply_markup=None)


@commands.message(Command('about'))
async def about_command(msg: Message):
    user_id = msg.from_user.id
    user_data = await get_user_data(user_id)

    if user_data:
        ...
    else:
        await msg.answer('SuckMyDickBROOO', reply_markup=None)
